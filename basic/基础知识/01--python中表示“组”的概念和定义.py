# ---------列表
# 列表里面可以是同一种数据类型
print(type([1,2,3,4,5]))    # <class 'list'>
# 也可以是多种数据类型
print(type(["hello"," world", 4,5]))    # <class 'list'>
print(type(["hello"," world", 4,5,True,False]))    # <class 'list'>
# 嵌套列表--对应的是其他编程语言里面的二维数组
print(type([["hello"," world"], [4,5],[True,False]]))    # <class 'list'>


# ------------获取列表中的某一项数据
print(["hello"," world", 4,5,True,False][0])  # hello
print(["hello"," world", 4,5,True,False][3])  # 5
print(["hello"," world", 4,5,True,False][0:2])  # ['hello', ' world']
print(["hello"," world", 4,5,True,False][-1:])  # [False]

# ----------列表的简单运算
print([1,2,3]+[4,5,6])  # [1, 2, 3, 4, 5, 6]
# print([1,2,3]-[4,5,6])  # 报错，列表没有减法的运算
# print([1,2,3]*[4,5,6])  # 报错，列表没有相乘的运算
# print([1,2,3]/[4,5,6])  # 报错，列表没有相除的运算
print([1,2,3]*4)  # [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

# ----------元组 tuple
print(type((1, 2, 3, 4)))  # <class 'tuple'>
# -----元组的获取方式和其他字符串,列表都是一样的
print((1,2,3,4)[0])  # 1
print((1,2,3,4)[1:4])   # (2, 3, 4)
print((1,2,3,4)[-1:])   # (4,)

# ---------关于类型的判断
# 当元组里面只有一个数值的时候,其数据类型是那个数值的类型
# 里面是int类型的时候
print(type((1)))    # <class 'int'>
# 里面是字符串类型的时候
print(type(("hello")))    # <class 'str'>
# 原因,因为单括号会当成数值预算():
# 如:(1+2)所以此时元组的数据类型是单数据的数据类型
# -----解决单数据的数据类型问题
# 在元组里单数据的后面加上一个逗号就可以了.
print(type((1,)))   # <class 'tuple'>

# ----------元组的运算
# --相加运算
print((1,2,3,4)+(5,6))  # (1, 2, 3, 4, 5, 6)
# --想乘运算
print((1,2,3)*3)    # (1, 2, 3, 1, 2, 3, 1, 2, 3)


# ----------序列: str, list, tuple 都是序列
# --判断某个字符是否在一个序列里面
print(3 in [1,2,3,4,5])  # True
print(3 not in [1,2,3,4,5])  # False

# --获取序列的长度
print(len([1,2,34,5]))  # 4
print(len("hello world"))  # 11

print(max([1,2,3,4,56,8]))  # 56
print(min([1,2,3,4,5, 6, 7]))  # 1

print(max("hello world"))  # w
print(min("hello world"))  # ' '输出的是一个空格
print(min("helloworld"))  # d

# -----获取某一个字符的asc码
print(ord("1"))  # 49
print(ord("w"))  # 119


# ------------------集合 set
print(type({1,2,3,4}))  # <class 'set'>
# -----集合的第一个特性     --无序，使用列表的一些方法会报错
# print({1,2,3,4}[1])    -- 报错
# -----集合的第二个特性     --不重复
print({1,1,1,2,3,3,})   # {1, 2, 3}

# -----获取集合的长度
print(len({1,2,3,4}))   # 4
# -----判断某个元素是否在集合里面
print(3 in {1,2,3,4})   # True
print(3 not in {1,2,3,4})   # False

# -----集合的运算
# --求两个集合的差集
print({1,2,3,4,5} - {3,4})    # {1, 2, 5}
# --求两个集合的交集，求出具有相同部分
print({1,2,3,4,5} & {3,4})     # {3, 4}
# --将两个集合合并，并且剔除相同的部分
print({1,2,3,4,5} | {3,4,7,8})     # {1, 2, 3, 4, 5, 7, 8}
# print({1,2,3,4,5} + {3,4,7,8})     # 集合没有相加操作，会报错
# --创建空的集合
# 一个空的{} 并不是空的集合，
print(type({}))  # <class 'dict'>
# 创建空的集合的方法
print(type(set()))  # <class 'set'>
print(len(set()))  # 0


# -----------字典
print({'1':'《神雕侠侣》','2':'《射雕英雄传》'})
# --访问字典里面的元素
print({'1':'《神雕侠侣》','2':'《射雕英雄传》'}['1'])  # 《神雕侠侣》

















